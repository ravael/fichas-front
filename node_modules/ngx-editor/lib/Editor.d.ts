import { Schema } from 'prosemirror-model';
import { Plugin } from 'prosemirror-state';
import { EditorProps, EditorView } from 'prosemirror-view';
import { Subject } from 'rxjs';
import EditorCommands from './EditorCommands';
declare type Content = string | Record<string, any> | null;
interface Options {
    content?: Content;
    enabled?: boolean;
    placeholder?: string;
    history?: boolean;
    keyboardShortcuts?: boolean;
    inputRules?: boolean;
    schema?: Schema;
    plugins?: Plugin[];
    nodeViews?: EditorProps['nodeViews'];
}
declare class Editor {
    view: EditorView;
    options: Options;
    el: DocumentFragment;
    onContentChange: Subject<Record<string, null>>;
    onFocus: Subject<void>;
    onBlur: Subject<void>;
    onUpdate: Subject<unknown>;
    constructor(options?: Options);
    get schema(): Schema;
    get commands(): EditorCommands;
    setContent(content: Content): void;
    private handleTransactions;
    private createEditor;
    registerPlugin(plugin: Plugin): void;
    enable(): void;
    disable(): void;
    setPlaceholder(placeholder: string): void;
    destroy(): void;
}
export default Editor;
