(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('prosemirror-state'), require('prosemirror-view')) :
    typeof define === 'function' && define.amd ? define('ngx-editor/plugins', ['exports', 'prosemirror-state', 'prosemirror-view'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-editor'] = global['ngx-editor'] || {}, global['ngx-editor'].plugins = {}), global.prosemirrorState, global.prosemirrorView));
}(this, (function (exports, prosemirrorState, prosemirrorView) { 'use strict';

    var PLACEHOLDER_CLASSNAME = 'NgxEditor__Placeholder';
    var placeholderPlugin = function (text) {
        return new prosemirrorState.Plugin({
            key: new prosemirrorState.PluginKey('placeholder'),
            state: {
                init: function () {
                    return text !== null && text !== void 0 ? text : '';
                },
                apply: function (tr, previousVal) {
                    var _a;
                    var placeholder = (_a = tr.getMeta('UPDATE_PLACEHOLDER')) !== null && _a !== void 0 ? _a : previousVal;
                    return placeholder;
                }
            },
            props: {
                decorations: function (state) {
                    var _a;
                    var doc = state.doc;
                    var placeholder = this.getState(state);
                    if (!placeholder) {
                        return prosemirrorView.DecorationSet.empty;
                    }
                    if (doc.childCount === 1 && ((_a = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _a === void 0 ? void 0 : _a.isTextblock) && doc.firstChild.content.size === 0) {
                        var placeHolderEl = document.createElement('span');
                        placeHolderEl.classList.add(PLACEHOLDER_CLASSNAME);
                        placeHolderEl.textContent = placeholder;
                        return prosemirrorView.DecorationSet.create(doc, [prosemirrorView.Decoration.widget(1, placeHolderEl)]);
                    }
                    return prosemirrorView.DecorationSet.empty;
                }
            }
        });
    };
    var ɵ0 = placeholderPlugin;

    var editablePlugin = function (editable) {
        if (editable === void 0) { editable = true; }
        return new prosemirrorState.Plugin({
            key: new prosemirrorState.PluginKey('editable'),
            state: {
                init: function () {
                    return editable;
                },
                apply: function (tr, previousVal) {
                    var _a;
                    return (_a = tr.getMeta('UPDATE_EDITABLE')) !== null && _a !== void 0 ? _a : previousVal;
                }
            },
            props: {
                editable: function (state) {
                    return this.getState(state);
                },
                attributes: function (state) {
                    var isEnabled = this.getState(state);
                    if (isEnabled) {
                        return null;
                    }
                    return {
                        class: 'NgxEditor__Content--Disabled'
                    };
                }
            }
        });
    };
    var ɵ0$1 = editablePlugin;

    var WRAPPER_CLASSNAME = 'NgxEditor__ImageWrapper';
    var WRAPPER_RESIZE_ACTIVE_CLASSNAME = 'NgxEditor__Resizer--Active';
    var RESIZE_HANDLE_CLASSNAME = 'NgxEditor__ResizeHandle';
    var createHandle = function (direction) {
        var handle = document.createElement('span');
        handle.className = RESIZE_HANDLE_CLASSNAME + "--" + direction;
        return handle;
    };
    var ɵ0$2 = createHandle;
    var ImageRezieView = /** @class */ (function () {
        function ImageRezieView(node, view, getPos) {
            var _a, _b;
            var outer = document.createElement('span');
            outer.className = WRAPPER_CLASSNAME;
            outer.style.width = node.attrs.width;
            var handle = document.createElement('span');
            handle.className = RESIZE_HANDLE_CLASSNAME;
            var img = document.createElement('img');
            img.setAttribute('src', node.attrs.src);
            img.setAttribute('alt', (_a = node.attrs.alt) !== null && _a !== void 0 ? _a : '');
            img.setAttribute('title', (_b = node.attrs.title) !== null && _b !== void 0 ? _b : '');
            img.style.width = '100%';
            img.style.height = '100%';
            var handleBottomRight = createHandle('BR');
            var handleTopRight = createHandle('TL');
            var handleTopLeft = createHandle('TR');
            var handleBottomLeft = createHandle('BL');
            var resizePropoptionally = function (evt) {
                evt.preventDefault();
                var state = view.state, dispatch = view.dispatch;
                var tr = state.tr;
                var startX = evt.pageX;
                var startWidth = img.clientWidth;
                var width = window.getComputedStyle(view.dom).width;
                var editorWidth = parseInt(width, 10);
                var onMouseMove = function (e) {
                    var currentX = e.pageX;
                    var diffInPx = currentX - startX;
                    var computedWidth = startWidth + diffInPx;
                    // prevent image overflow the editor
                    // prevent resizng below 20px
                    if (computedWidth > editorWidth || computedWidth < 20) {
                        return;
                    }
                    outer.style.width = computedWidth + "px";
                };
                var onMouseUp = function (e) {
                    e.preventDefault();
                    document.removeEventListener('mousemove', onMouseMove);
                    document.removeEventListener('mouseup', onMouseUp);
                    var transaction = tr.setNodeMarkup(getPos(), undefined, {
                        src: node.attrs.src,
                        width: outer.style.width
                    });
                    var resolvedPos = transaction.doc.resolve(getPos());
                    var newSelection = new prosemirrorState.NodeSelection(resolvedPos);
                    transaction.setSelection(newSelection);
                    dispatch(transaction);
                };
                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
            };
            handleBottomRight.addEventListener('mousedown', resizePropoptionally, { once: true });
            handleTopRight.addEventListener('mousedown', resizePropoptionally, { once: true });
            handleTopLeft.addEventListener('mousedown', resizePropoptionally, { once: true });
            handleBottomLeft.addEventListener('mousedown', resizePropoptionally, { once: true });
            handle.appendChild(handleBottomRight);
            handle.appendChild(handleTopRight);
            handle.appendChild(handleTopLeft);
            handle.appendChild(handleBottomLeft);
            outer.appendChild(handle);
            outer.appendChild(img);
            this.dom = outer;
            this.img = img;
            this.handle = handle;
        }
        ImageRezieView.prototype.selectNode = function () {
            this.dom.classList.add(WRAPPER_RESIZE_ACTIVE_CLASSNAME);
            this.handle.style.display = 'block';
        };
        ImageRezieView.prototype.deselectNode = function () {
            this.dom.classList.remove(WRAPPER_RESIZE_ACTIVE_CLASSNAME);
            this.handle.style.display = 'none';
        };
        return ImageRezieView;
    }());
    var defaultOptions = {
        resize: true,
    };
    var imagePlugin = function (opts) {
        if (opts === void 0) { opts = defaultOptions; }
        var options = Object.assign(Object.assign({}, defaultOptions), opts);
        return new prosemirrorState.Plugin({
            key: new prosemirrorState.PluginKey('link'),
            props: {
                nodeViews: {
                    image: function (node, view, getPos) {
                        if (!options.resize) {
                            return null;
                        }
                        return new ImageRezieView(node, view, getPos);
                    },
                }
            }
        });
    };
    var ɵ1 = imagePlugin;

    /**
     * Generated bundle index. Do not edit.
     */

    exports.editable = editablePlugin;
    exports.image = imagePlugin;
    exports.placeholder = placeholderPlugin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-editor-plugins.umd.js.map
