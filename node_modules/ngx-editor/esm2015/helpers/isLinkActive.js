import getSelectionMarks from './getSelectionMarks';
export const isLinkActive = (state) => {
    const { schema, selection: { anchor, head, from, to } } = state;
    if (!schema.marks.link) {
        return false;
    }
    const isForwardSelection = anchor === from;
    const linkMarks = getSelectionMarks(state).filter(mark => mark.type === schema.marks.link);
    if (!linkMarks.length) {
        return false;
    }
    const selectionHasOnlyMarks = isForwardSelection ?
        (state.doc.rangeHasMark(anchor, anchor + 1, schema.marks.link) &&
            state.doc.rangeHasMark(head - 1, head, schema.marks.link)) : (state.doc.rangeHasMark(anchor - 1, anchor, schema.marks.link) &&
        state.doc.rangeHasMark(head, head + 1, schema.marks.link));
    if (linkMarks.length === 1 && selectionHasOnlyMarks) {
        return true;
    }
    return false;
};
export default isLinkActive;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNMaW5rQWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hlbHBlcnMvaXNMaW5rQWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8saUJBQWlCLE1BQU0scUJBQXFCLENBQUM7QUFFcEQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBa0IsRUFBVyxFQUFFO0lBQzFELE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFFaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sS0FBSyxJQUFJLENBQUM7SUFDM0MsTUFBTSxTQUFTLEdBQVcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5HLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ3JCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLENBQUM7UUFDaEQsQ0FDRSxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUM3RCxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUMxRCxDQUFDLENBQUMsQ0FBQyxDQUNGLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQzdELEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQzFELENBQUM7SUFFSixJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLHFCQUFxQixFQUFFO1FBQ25ELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLGVBQWUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBNYXJrIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuXG5pbXBvcnQgZ2V0U2VsZWN0aW9uTWFya3MgZnJvbSAnLi9nZXRTZWxlY3Rpb25NYXJrcyc7XG5cbmV4cG9ydCBjb25zdCBpc0xpbmtBY3RpdmUgPSAoc3RhdGU6IEVkaXRvclN0YXRlKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHsgc2NoZW1hLCBzZWxlY3Rpb246IHsgYW5jaG9yLCBoZWFkLCBmcm9tLCB0byB9IH0gPSBzdGF0ZTtcblxuICBpZiAoIXNjaGVtYS5tYXJrcy5saW5rKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaXNGb3J3YXJkU2VsZWN0aW9uID0gYW5jaG9yID09PSBmcm9tO1xuICBjb25zdCBsaW5rTWFya3M6IE1hcmtbXSA9IGdldFNlbGVjdGlvbk1hcmtzKHN0YXRlKS5maWx0ZXIobWFyayA9PiBtYXJrLnR5cGUgPT09IHNjaGVtYS5tYXJrcy5saW5rKTtcblxuICBpZiAoIWxpbmtNYXJrcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzZWxlY3Rpb25IYXNPbmx5TWFya3MgPSBpc0ZvcndhcmRTZWxlY3Rpb24gP1xuICAgIChcbiAgICAgIHN0YXRlLmRvYy5yYW5nZUhhc01hcmsoYW5jaG9yLCBhbmNob3IgKyAxLCBzY2hlbWEubWFya3MubGluaykgJiZcbiAgICAgIHN0YXRlLmRvYy5yYW5nZUhhc01hcmsoaGVhZCAtIDEsIGhlYWQsIHNjaGVtYS5tYXJrcy5saW5rKVxuICAgICkgOiAoXG4gICAgICBzdGF0ZS5kb2MucmFuZ2VIYXNNYXJrKGFuY2hvciAtIDEsIGFuY2hvciwgc2NoZW1hLm1hcmtzLmxpbmspICYmXG4gICAgICBzdGF0ZS5kb2MucmFuZ2VIYXNNYXJrKGhlYWQsIGhlYWQgKyAxLCBzY2hlbWEubWFya3MubGluaylcbiAgICApO1xuXG4gIGlmIChsaW5rTWFya3MubGVuZ3RoID09PSAxICYmIHNlbGVjdGlvbkhhc09ubHlNYXJrcykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNMaW5rQWN0aXZlO1xuIl19