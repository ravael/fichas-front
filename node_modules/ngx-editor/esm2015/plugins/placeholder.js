import { Plugin, PluginKey } from 'prosemirror-state';
import { DecorationSet, Decoration } from 'prosemirror-view';
const PLACEHOLDER_CLASSNAME = 'NgxEditor__Placeholder';
const placeholderPlugin = (text) => {
    return new Plugin({
        key: new PluginKey('placeholder'),
        state: {
            init() {
                return text !== null && text !== void 0 ? text : '';
            },
            apply(tr, previousVal) {
                var _a;
                const placeholder = (_a = tr.getMeta('UPDATE_PLACEHOLDER')) !== null && _a !== void 0 ? _a : previousVal;
                return placeholder;
            }
        },
        props: {
            decorations(state) {
                var _a;
                const doc = state.doc;
                const placeholder = this.getState(state);
                if (!placeholder) {
                    return DecorationSet.empty;
                }
                if (doc.childCount === 1 && ((_a = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _a === void 0 ? void 0 : _a.isTextblock) && doc.firstChild.content.size === 0) {
                    const placeHolderEl = document.createElement('span');
                    placeHolderEl.classList.add(PLACEHOLDER_CLASSNAME);
                    placeHolderEl.textContent = placeholder;
                    return DecorationSet.create(doc, [Decoration.widget(1, placeHolderEl)]);
                }
                return DecorationSet.empty;
            }
        }
    });
};
const ɵ0 = placeholderPlugin;
export default placeholderPlugin;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9wbGFjZWhvbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFlLFNBQVMsRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFN0QsTUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsQ0FBQztBQUV2RCxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBYSxFQUFVLEVBQUU7SUFDbEQsT0FBTyxJQUFJLE1BQU0sQ0FBQztRQUNoQixHQUFHLEVBQUUsSUFBSSxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQ2pDLEtBQUssRUFBRTtZQUNMLElBQUk7Z0JBQ0YsT0FBTyxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxFQUFFLENBQUM7WUFDcEIsQ0FBQztZQUNELEtBQUssQ0FBQyxFQUFlLEVBQUUsV0FBbUI7O2dCQUN4QyxNQUFNLFdBQVcsU0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLG1DQUFJLFdBQVcsQ0FBQztnQkFDcEUsT0FBTyxXQUFXLENBQUM7WUFDckIsQ0FBQztTQUNGO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsV0FBVyxDQUFDLEtBQWtCOztnQkFDNUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQkFFdEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFekMsSUFBSSxDQUFDLFdBQVcsRUFBRTtvQkFDaEIsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO2lCQUM1QjtnQkFFRCxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxXQUFJLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxVQUFVLDBDQUFFLFdBQVcsQ0FBQSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7b0JBQzdGLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3JELGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7b0JBQ25ELGFBQWEsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO29CQUN4QyxPQUFPLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN6RTtnQkFFRCxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUM7WUFDN0IsQ0FBQztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDOztBQUVGLGVBQWUsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4sIEVkaXRvclN0YXRlLCBQbHVnaW5LZXksIFRyYW5zYWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgRGVjb3JhdGlvblNldCwgRGVjb3JhdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuXG5jb25zdCBQTEFDRUhPTERFUl9DTEFTU05BTUUgPSAnTmd4RWRpdG9yX19QbGFjZWhvbGRlcic7XG5cbmNvbnN0IHBsYWNlaG9sZGVyUGx1Z2luID0gKHRleHQ/OiBzdHJpbmcpOiBQbHVnaW4gPT4ge1xuICByZXR1cm4gbmV3IFBsdWdpbih7XG4gICAga2V5OiBuZXcgUGx1Z2luS2V5KCdwbGFjZWhvbGRlcicpLFxuICAgIHN0YXRlOiB7XG4gICAgICBpbml0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0ZXh0ID8/ICcnO1xuICAgICAgfSxcbiAgICAgIGFwcGx5KHRyOiBUcmFuc2FjdGlvbiwgcHJldmlvdXNWYWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdHIuZ2V0TWV0YSgnVVBEQVRFX1BMQUNFSE9MREVSJykgPz8gcHJldmlvdXNWYWw7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBkZWNvcmF0aW9ucyhzdGF0ZTogRWRpdG9yU3RhdGUpOiBEZWNvcmF0aW9uU2V0IHtcbiAgICAgICAgY29uc3QgZG9jID0gc3RhdGUuZG9jO1xuXG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5nZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICAgICAgaWYgKCFwbGFjZWhvbGRlcikge1xuICAgICAgICAgIHJldHVybiBEZWNvcmF0aW9uU2V0LmVtcHR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvYy5jaGlsZENvdW50ID09PSAxICYmIGRvYz8uZmlyc3RDaGlsZD8uaXNUZXh0YmxvY2sgJiYgZG9jLmZpcnN0Q2hpbGQuY29udGVudC5zaXplID09PSAwKSB7XG4gICAgICAgICAgY29uc3QgcGxhY2VIb2xkZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICBwbGFjZUhvbGRlckVsLmNsYXNzTGlzdC5hZGQoUExBQ0VIT0xERVJfQ0xBU1NOQU1FKTtcbiAgICAgICAgICBwbGFjZUhvbGRlckVsLnRleHRDb250ZW50ID0gcGxhY2Vob2xkZXI7XG4gICAgICAgICAgcmV0dXJuIERlY29yYXRpb25TZXQuY3JlYXRlKGRvYywgW0RlY29yYXRpb24ud2lkZ2V0KDEsIHBsYWNlSG9sZGVyRWwpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcGxhY2Vob2xkZXJQbHVnaW47XG4iXX0=