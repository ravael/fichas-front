import { NodeSelection, Plugin, PluginKey } from 'prosemirror-state';
const WRAPPER_CLASSNAME = 'NgxEditor__ImageWrapper';
const WRAPPER_RESIZE_ACTIVE_CLASSNAME = 'NgxEditor__Resizer--Active';
const RESIZE_HANDLE_CLASSNAME = 'NgxEditor__ResizeHandle';
const createHandle = (direction) => {
    const handle = document.createElement('span');
    handle.className = `${RESIZE_HANDLE_CLASSNAME}--${direction}`;
    return handle;
};
const ɵ0 = createHandle;
class ImageRezieView {
    constructor(node, view, getPos) {
        var _a, _b;
        const outer = document.createElement('span');
        outer.className = WRAPPER_CLASSNAME;
        outer.style.width = node.attrs.width;
        const handle = document.createElement('span');
        handle.className = RESIZE_HANDLE_CLASSNAME;
        const img = document.createElement('img');
        img.setAttribute('src', node.attrs.src);
        img.setAttribute('alt', (_a = node.attrs.alt) !== null && _a !== void 0 ? _a : '');
        img.setAttribute('title', (_b = node.attrs.title) !== null && _b !== void 0 ? _b : '');
        img.style.width = '100%';
        img.style.height = '100%';
        const handleBottomRight = createHandle('BR');
        const handleTopRight = createHandle('TL');
        const handleTopLeft = createHandle('TR');
        const handleBottomLeft = createHandle('BL');
        const resizePropoptionally = (evt) => {
            evt.preventDefault();
            const { state, dispatch } = view;
            const { tr } = state;
            const startX = evt.pageX;
            const startWidth = img.clientWidth;
            const { width } = window.getComputedStyle(view.dom);
            const editorWidth = parseInt(width, 10);
            const onMouseMove = (e) => {
                const currentX = e.pageX;
                const diffInPx = currentX - startX;
                const computedWidth = startWidth + diffInPx;
                // prevent image overflow the editor
                // prevent resizng below 20px
                if (computedWidth > editorWidth || computedWidth < 20) {
                    return;
                }
                outer.style.width = `${computedWidth}px`;
            };
            const onMouseUp = (e) => {
                e.preventDefault();
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
                const transaction = tr.setNodeMarkup(getPos(), undefined, {
                    src: node.attrs.src,
                    width: outer.style.width
                });
                const resolvedPos = transaction.doc.resolve(getPos());
                const newSelection = new NodeSelection(resolvedPos);
                transaction.setSelection(newSelection);
                dispatch(transaction);
            };
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        };
        handleBottomRight.addEventListener('mousedown', resizePropoptionally, { once: true });
        handleTopRight.addEventListener('mousedown', resizePropoptionally, { once: true });
        handleTopLeft.addEventListener('mousedown', resizePropoptionally, { once: true });
        handleBottomLeft.addEventListener('mousedown', resizePropoptionally, { once: true });
        handle.appendChild(handleBottomRight);
        handle.appendChild(handleTopRight);
        handle.appendChild(handleTopLeft);
        handle.appendChild(handleBottomLeft);
        outer.appendChild(handle);
        outer.appendChild(img);
        this.dom = outer;
        this.img = img;
        this.handle = handle;
    }
    selectNode() {
        this.dom.classList.add(WRAPPER_RESIZE_ACTIVE_CLASSNAME);
        this.handle.style.display = 'block';
    }
    deselectNode() {
        this.dom.classList.remove(WRAPPER_RESIZE_ACTIVE_CLASSNAME);
        this.handle.style.display = 'none';
    }
}
const defaultOptions = {
    resize: true,
};
const imagePlugin = (opts = defaultOptions) => {
    const options = Object.assign(Object.assign({}, defaultOptions), opts);
    return new Plugin({
        key: new PluginKey('link'),
        props: {
            nodeViews: {
                image: (node, view, getPos) => {
                    if (!options.resize) {
                        return null;
                    }
                    return new ImageRezieView(node, view, getPos);
                },
            }
        }
    });
};
const ɵ1 = imagePlugin;
export default imagePlugin;
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,