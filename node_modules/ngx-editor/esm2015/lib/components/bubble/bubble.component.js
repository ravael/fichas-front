import { Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { NodeSelection } from 'prosemirror-state';
import { calculateBubblePos, getSelectionMarks, isLinkActive } from 'ngx-editor/helpers';
import { removeLink } from 'ngx-editor/commands';
export class BubbleComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
    }
    setDomPosition() {
        // Otherwise, reposition it and update its content
        this.showBubble();
        const { bottom, left } = calculateBubblePos(this.view, this.el.nativeElement);
        this.renderer.setStyle(this.el.nativeElement, 'left', `${left}px`);
        this.renderer.setStyle(this.el.nativeElement, 'bottom', `${bottom}px`);
    }
    showBubble() {
        this.renderer.setStyle(this.el.nativeElement, 'display', 'flex');
    }
    hideBubble() {
        this.renderer.setStyle(this.el.nativeElement, 'display', 'none');
    }
    removeLink() {
        const { state, dispatch } = this.view;
        removeLink()(state, dispatch);
        this.view.focus();
    }
    update() {
        const { state } = this.view;
        const { schema, selection } = state;
        if (!schema.marks.link) {
            return;
        }
        if (selection instanceof NodeSelection) {
            if (selection.node.type.name === 'image') {
                return;
            }
        }
        const hasFocus = this.view.hasFocus();
        const isActive = isLinkActive(state);
        const linkMarks = getSelectionMarks(state).filter(mark => mark.type === schema.marks.link);
        // hide for selection and show only for clicks
        if (!hasFocus || !isActive) {
            this.hideBubble();
            return;
        }
        const [linkItem] = linkMarks;
        this.activeLinkItem = linkItem;
        // update dom position
        this.setDomPosition();
    }
    ngOnInit() {
        this.view = this.editor.view;
        this.updateSubscription = this.editor.onUpdate.subscribe(() => {
            this.update();
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
    }
}
BubbleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-bubble',
                template: "<ng-container *ngIf=\"activeLinkItem\">\n  <a [href]=\"activeLinkItem.attrs.href\" target=\"_blank\" [title]=\"activeLinkItem.attrs.href\">\n    {{activeLinkItem.attrs.href}}\n  </a>\n  <div class=\"commands\">\n    <button class=\"command\" (click)=\"removeLink()\">Remove link</button>\n  </div>\n</ng-container>\n",
                styles: [":host{align-items:center;background:#fff;border:1px solid silver;border-radius:4px;display:none;margin-bottom:.3rem;padding:.3rem;position:absolute;transform:translateX(-50%);z-index:20}:host:after,:host:before{border:solid transparent;border-width:5px 5px 0;content:\"\";height:0;left:50%;margin-left:-5px;position:absolute;width:0}:host:before{border-top-color:silver;bottom:-6px}:host:after{border-top-color:#fff;bottom:-4.5px}:host a{display:inline-block;margin-left:2px;max-width:15rem;overflow:hidden;text-overflow:ellipsis}:host .commands{display:flex;margin-left:.5rem}:host .commands .command{background-color:#f1f1f1;border:none;border-radius:2px;display:flex;padding:2px;white-space:nowrap}:host .commands .command:hover{text-decoration:underline}"]
            },] }
];
BubbleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
BubbleComponent.propDecorators = {
    editor: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9idWJibGUvYnViYmxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQ3BCLFNBQVMsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS2xELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFTakQsTUFBTSxPQUFPLGVBQWU7SUFPMUIsWUFDVSxFQUFjLEVBQ2QsUUFBbUI7UUFEbkIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7SUFDekIsQ0FBQztJQUVHLGNBQWM7UUFDcEIsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVsQixNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVPLFVBQVU7UUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QyxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU8sTUFBTTtRQUNaLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzVCLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRXBDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUN0QixPQUFPO1NBQ1I7UUFFRCxJQUFJLFNBQVMsWUFBWSxhQUFhLEVBQUU7WUFDdEMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUN4QyxPQUFPO2FBQ1I7U0FDRjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEMsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sU0FBUyxHQUFXLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuRyw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsT0FBTztTQUNSO1FBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztRQUUvQixzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUU3QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUM1RCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDOzs7WUFsRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0Qix3VUFBc0M7O2FBRXZDOzs7WUFqQlksVUFBVTtZQUNiLFNBQVM7OztxQkFrQmhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksXG4gIE9uSW5pdCwgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7IE1hcmsgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgY2FsY3VsYXRlQnViYmxlUG9zLCBnZXRTZWxlY3Rpb25NYXJrcywgaXNMaW5rQWN0aXZlIH0gZnJvbSAnbmd4LWVkaXRvci9oZWxwZXJzJztcbmltcG9ydCB7IHJlbW92ZUxpbmsgfSBmcm9tICduZ3gtZWRpdG9yL2NvbW1hbmRzJztcblxuaW1wb3J0IEVkaXRvciBmcm9tICcuLi8uLi9FZGl0b3InO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtYnViYmxlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2J1YmJsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2J1YmJsZS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEJ1YmJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgZWRpdG9yOiBFZGl0b3I7XG5cbiAgcHJpdmF0ZSB2aWV3OiBFZGl0b3JWaWV3O1xuICBwcml2YXRlIHVwZGF0ZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBhY3RpdmVMaW5rSXRlbTogTWFyaztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHsgfVxuXG4gIHByaXZhdGUgc2V0RG9tUG9zaXRpb24oKTogdm9pZCB7XG4gICAgLy8gT3RoZXJ3aXNlLCByZXBvc2l0aW9uIGl0IGFuZCB1cGRhdGUgaXRzIGNvbnRlbnRcbiAgICB0aGlzLnNob3dCdWJibGUoKTtcblxuICAgIGNvbnN0IHsgYm90dG9tLCBsZWZ0IH0gPSBjYWxjdWxhdGVCdWJibGVQb3ModGhpcy52aWV3LCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdsZWZ0JywgYCR7bGVmdH1weGApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnYm90dG9tJywgYCR7Ym90dG9tfXB4YCk7XG4gIH1cblxuICBwcml2YXRlIHNob3dCdWJibGUoKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5JywgJ2ZsZXgnKTtcbiAgfVxuXG4gIHByaXZhdGUgaGlkZUJ1YmJsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICB9XG5cbiAgcmVtb3ZlTGluaygpOiB2b2lkIHtcbiAgICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdGhpcy52aWV3O1xuICAgIHJlbW92ZUxpbmsoKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgIHRoaXMudmlldy5mb2N1cygpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcy52aWV3O1xuICAgIGNvbnN0IHsgc2NoZW1hLCBzZWxlY3Rpb24gfSA9IHN0YXRlO1xuXG4gICAgaWYgKCFzY2hlbWEubWFya3MubGluaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3Rpb24gaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSB7XG4gICAgICBpZiAoc2VsZWN0aW9uLm5vZGUudHlwZS5uYW1lID09PSAnaW1hZ2UnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBoYXNGb2N1cyA9IHRoaXMudmlldy5oYXNGb2N1cygpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gaXNMaW5rQWN0aXZlKHN0YXRlKTtcbiAgICBjb25zdCBsaW5rTWFya3M6IE1hcmtbXSA9IGdldFNlbGVjdGlvbk1hcmtzKHN0YXRlKS5maWx0ZXIobWFyayA9PiBtYXJrLnR5cGUgPT09IHNjaGVtYS5tYXJrcy5saW5rKTtcblxuICAgIC8vIGhpZGUgZm9yIHNlbGVjdGlvbiBhbmQgc2hvdyBvbmx5IGZvciBjbGlja3NcbiAgICBpZiAoIWhhc0ZvY3VzIHx8ICFpc0FjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlQnViYmxlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgW2xpbmtJdGVtXSA9IGxpbmtNYXJrcztcbiAgICB0aGlzLmFjdGl2ZUxpbmtJdGVtID0gbGlua0l0ZW07XG5cbiAgICAvLyB1cGRhdGUgZG9tIHBvc2l0aW9uXG4gICAgdGhpcy5zZXREb21Qb3NpdGlvbigpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy52aWV3ID0gdGhpcy5lZGl0b3IudmlldztcblxuICAgIHRoaXMudXBkYXRlU3Vic2NyaXB0aW9uID0gdGhpcy5lZGl0b3Iub25VcGRhdGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=