import { keymap } from 'prosemirror-keymap';
import { toggleMark, baseKeymap } from 'prosemirror-commands';
import { splitListItem, liftListItem, sinkListItem } from 'prosemirror-schema-list';
import { history, undo, redo } from 'prosemirror-history';
import { inputRules, wrappingInputRule, textblockTypeInputRule, smartQuotes, emDash, ellipsis } from 'prosemirror-inputrules';
const isMacOs = /Mac/.test(navigator.platform);
// Input rules ref: https://github.com/ProseMirror/prosemirror-example-setup/
// : (NodeType) → InputRule
// Given a blockquote node type, returns an input rule that turns `"> "`
// at the start of a textblock into a blockquote.
const blockQuoteRule = (nodeType) => {
    return wrappingInputRule(/^\s*>\s$/, nodeType);
};
const ɵ0 = blockQuoteRule;
// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a number
// followed by a dot at the start of a textblock into an ordered list.
const orderedListRule = (nodeType) => {
    return wrappingInputRule(/^(\d+)\.\s$/, nodeType, match => ({ order: +match[1] }), (match, node) => node.childCount + node.attrs.order === +match[1]);
};
const ɵ1 = orderedListRule;
// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a bullet
// (dash, plush, or asterisk) at the start of a textblock into a
// bullet list.
const bulletListRule = (nodeType) => {
    return wrappingInputRule(/^\s*([-+*])\s$/, nodeType);
};
const ɵ2 = bulletListRule;
// : (NodeType) → InputRule
// Given a code block node type, returns an input rule that turns a
// textblock starting with three backticks into a code block.
const codeBlockRule = (nodeType) => {
    return textblockTypeInputRule(/^```$/, nodeType);
};
const ɵ3 = codeBlockRule;
// : (NodeType, number) → InputRule
// Given a node type and a maximum level, creates an input rule that
// turns up to that number of `#` characters followed by a space at
// the start of a textblock into a heading whose level corresponds to
// the number of `#` signs.
const headingRule = (nodeType, maxLevel) => {
    return textblockTypeInputRule(new RegExp('^(#{1,' + maxLevel + '})\\s$'), nodeType, (match) => ({ level: match[1].length }));
};
const ɵ4 = headingRule;
// : (Schema) → Plugin
// A set of input rules for creating the basic block quotes, lists,
// code blocks, and heading.
const buildInputRules = (schema) => {
    const rules = smartQuotes.concat(ellipsis, emDash);
    rules.push(blockQuoteRule(schema.nodes.blockquote));
    rules.push(orderedListRule(schema.nodes.ordered_list));
    rules.push(bulletListRule(schema.nodes.bullet_list));
    rules.push(codeBlockRule(schema.nodes.code_block));
    rules.push(headingRule(schema.nodes.heading, 6));
    return inputRules({ rules });
};
const ɵ5 = buildInputRules;
const getKeyboardShortcuts = (schema, options) => {
    const historyKeyMap = {};
    historyKeyMap['Mod-z'] = undo;
    if (isMacOs) {
        historyKeyMap['Shift-Mod-z'] = redo;
    }
    else {
        historyKeyMap['Mod-y'] = redo;
    }
    const plugins = [
        keymap({
            'Mod-b': toggleMark(schema.marks.strong),
            'Mod-i': toggleMark(schema.marks.em),
            'Mod-`': toggleMark(schema.marks.code),
        }),
        keymap({
            Enter: splitListItem(schema.nodes.list_item),
            'Mod-[': liftListItem(schema.nodes.list_item),
            'Mod-]': sinkListItem(schema.nodes.list_item),
            Tab: sinkListItem(schema.nodes.list_item)
        }),
        keymap(baseKeymap)
    ];
    if (options.history) {
        plugins.push(keymap(historyKeyMap));
    }
    return plugins;
};
const ɵ6 = getKeyboardShortcuts;
const getDefaultPlugins = (schema, options) => {
    const plugins = [];
    if (options.keyboardShortcuts) {
        plugins.push(...getKeyboardShortcuts(schema, { history: options.history }));
    }
    if (options.history) {
        plugins.push(history());
    }
    if (options.inputRules) {
        plugins.push(buildInputRules(schema));
    }
    return plugins;
};
const ɵ7 = getDefaultPlugins;
export default getDefaultPlugins;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdFBsdWdpbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2RlZmF1bHRQbHVnaW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFDTCxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQ3JELFdBQVcsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUM5QixNQUFNLHdCQUF3QixDQUFDO0FBWWhDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRS9DLDZFQUE2RTtBQUU3RSwyQkFBMkI7QUFDM0Isd0VBQXdFO0FBQ3hFLGlEQUFpRDtBQUNqRCxNQUFNLGNBQWMsR0FBRyxDQUFDLFFBQWtCLEVBQWEsRUFBRTtJQUN2RCxPQUFPLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUM7O0FBRUYsMkJBQTJCO0FBQzNCLG9FQUFvRTtBQUNwRSxzRUFBc0U7QUFDdEUsTUFBTSxlQUFlLEdBQUcsQ0FBQyxRQUFrQixFQUFhLEVBQUU7SUFDeEQsT0FBTyxpQkFBaUIsQ0FDdEIsYUFBYSxFQUNiLFFBQVEsRUFDUixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUMvQixDQUFDLEtBQUssRUFBRSxJQUFJ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IFNjaGVtYSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IGtleW1hcCB9IGZyb20gJ3Byb3NlbWlycm9yLWtleW1hcCc7XG5pbXBvcnQgeyB0b2dnbGVNYXJrLCBiYXNlS2V5bWFwIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuaW1wb3J0IHsgc3BsaXRMaXN0SXRlbSwgbGlmdExpc3RJdGVtLCBzaW5rTGlzdEl0ZW0gfSBmcm9tICdwcm9zZW1pcnJvci1zY2hlbWEtbGlzdCc7XG5pbXBvcnQgeyBoaXN0b3J5LCB1bmRvLCByZWRvIH0gZnJvbSAncHJvc2VtaXJyb3ItaGlzdG9yeSc7XG5pbXBvcnQge1xuICBpbnB1dFJ1bGVzLCB3cmFwcGluZ0lucHV0UnVsZSwgdGV4dGJsb2NrVHlwZUlucHV0UnVsZSxcbiAgc21hcnRRdW90ZXMsIGVtRGFzaCwgZWxsaXBzaXMsIElucHV0UnVsZVxufSBmcm9tICdwcm9zZW1pcnJvci1pbnB1dHJ1bGVzJztcblxuaW50ZXJmYWNlIE9wdGlvbnMge1xuICBoaXN0b3J5OiBib29sZWFuO1xuICBrZXlib2FyZFNob3J0Y3V0czogYm9vbGVhbjtcbiAgaW5wdXRSdWxlczogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFNob3J0Y3V0T3B0aW9ucyB7XG4gIGhpc3Rvcnk6IGJvb2xlYW47XG59XG5cbmNvbnN0IGlzTWFjT3MgPSAvTWFjLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG5cbi8vIElucHV0IHJ1bGVzIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL1Byb3NlTWlycm9yL3Byb3NlbWlycm9yLWV4YW1wbGUtc2V0dXAvXG5cbi8vIDogKE5vZGVUeXBlKSDihpIgSW5wdXRSdWxlXG4vLyBHaXZlbiBhIGJsb2NrcXVvdGUgbm9kZSB0eXBlLCByZXR1cm5zIGFuIGlucHV0IHJ1bGUgdGhhdCB0dXJucyBgXCI+IFwiYFxuLy8gYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGludG8gYSBibG9ja3F1b3RlLlxuY29uc3QgYmxvY2tRdW90ZVJ1bGUgPSAobm9kZVR5cGU6IE5vZGVUeXBlKTogSW5wdXRSdWxlID0+IHtcbiAgcmV0dXJuIHdyYXBwaW5nSW5wdXRSdWxlKC9eXFxzKj5cXHMkLywgbm9kZVR5cGUpO1xufTtcblxuLy8gOiAoTm9kZVR5cGUpIOKGkiBJbnB1dFJ1bGVcbi8vIEdpdmVuIGEgbGlzdCBub2RlIHR5cGUsIHJldHVybnMgYW4gaW5wdXQgcnVsZSB0aGF0IHR1cm5zIGEgbnVtYmVyXG4vLyBmb2xsb3dlZCBieSBhIGRvdCBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhbiBvcmRlcmVkIGxpc3QuXG5jb25zdCBvcmRlcmVkTGlzdFJ1bGUgPSAobm9kZVR5cGU6IE5vZGVUeXBlKTogSW5wdXRSdWxlID0+IHtcbiAgcmV0dXJuIHdyYXBwaW5nSW5wdXRSdWxlKFxuICAgIC9eKFxcZCspXFwuXFxzJC8sXG4gICAgbm9kZVR5cGUsXG4gICAgbWF0Y2ggPT4gKHsgb3JkZXI6ICttYXRjaFsxXSB9KSxcbiAgICAobWF0Y2gsIG5vZGUpID0+IG5vZGUuY2hpbGRDb3VudCArIG5vZGUuYXR0cnMub3JkZXIgPT09ICttYXRjaFsxXVxuICApO1xufTtcblxuLy8gOiAoTm9kZVR5cGUpIOKGkiBJbnB1dFJ1bGVcbi8vIEdpdmVuIGEgbGlzdCBub2RlIHR5cGUsIHJldHVybnMgYW4gaW5wdXQgcnVsZSB0aGF0IHR1cm5zIGEgYnVsbGV0XG4vLyAoZGFzaCwgcGx1c2gsIG9yIGFzdGVyaXNrKSBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhXG4vLyBidWxsZXQgbGlzdC5cbmNvbnN0IGJ1bGxldExpc3RSdWxlID0gKG5vZGVUeXBlOiBOb2RlVHlwZSk6IElucHV0UnVsZSA9PiB7XG4gIHJldHVybiB3cmFwcGluZ0lucHV0UnVsZSgvXlxccyooWy0rKl0pXFxzJC8sIG5vZGVUeXBlKTtcbn07XG5cbi8vIDogKE5vZGVUeXBlKSDihpIgSW5wdXRSdWxlXG4vLyBHaXZlbiBhIGNvZGUgYmxvY2sgbm9kZSB0eXBlLCByZXR1cm5zIGFuIGlucHV0IHJ1bGUgdGhhdCB0dXJucyBhXG4vLyB0ZXh0YmxvY2sgc3RhcnRpbmcgd2l0aCB0aHJlZSBiYWNrdGlja3MgaW50byBhIGNvZGUgYmxvY2suXG5jb25zdCBjb2RlQmxvY2tSdWxlID0gKG5vZGVUeXBlOiBOb2RlVHlwZSk6IElucHV0UnVsZSA9PiB7XG4gIHJldHVybiB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlKC9eYGBgJC8sIG5vZGVUeXBlKTtcbn07XG5cbi8vIDogKE5vZGVUeXBlLCBudW1iZXIpIOKGkiBJbnB1dFJ1bGVcbi8vIEdpdmVuIGEgbm9kZSB0eXBlIGFuZCBhIG1heGltdW0gbGV2ZWwsIGNyZWF0ZXMgYW4gaW5wdXQgcnVsZSB0aGF0XG4vLyB0dXJucyB1cCB0byB0aGF0IG51bWJlciBvZiBgI2AgY2hhcmFjdGVycyBmb2xsb3dlZCBieSBhIHNwYWNlIGF0XG4vLyB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2sgaW50byBhIGhlYWRpbmcgd2hvc2UgbGV2ZWwgY29ycmVzcG9uZHMgdG9cbi8vIHRoZSBudW1iZXIgb2YgYCNgIHNpZ25zLlxuY29uc3QgaGVhZGluZ1J1bGUgPSAobm9kZVR5cGU6IE5vZGVUeXBlLCBtYXhMZXZlbDogbnVtYmVyKTogSW5wdXRSdWxlID0+IHtcbiAgcmV0dXJuIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUoXG4gICAgbmV3IFJlZ0V4cCgnXigjezEsJyArIG1heExldmVsICsgJ30pXFxcXHMkJyksXG4gICAgbm9kZVR5cGUsXG4gICAgKG1hdGNoKSA9PiAoeyBsZXZlbDogbWF0Y2hbMV0ubGVuZ3RoIH0pXG4gICk7XG59O1xuXG4vLyA6IChTY2hlbWEpIOKGkiBQbHVnaW5cbi8vIEEgc2V0IG9mIGlucHV0IHJ1bGVzIGZvciBjcmVhdGluZyB0aGUgYmFzaWMgYmxvY2sgcXVvdGVzLCBsaXN0cyxcbi8vIGNvZGUgYmxvY2tzLCBhbmQgaGVhZGluZy5cbmNvbnN0IGJ1aWxkSW5wdXRSdWxlcyA9IChzY2hlbWE6IFNjaGVtYSk6IFBsdWdpbiA9PiB7XG4gIGNvbnN0IHJ1bGVzID0gc21hcnRRdW90ZXMuY29uY2F0KGVsbGlwc2lzLCBlbURhc2gpO1xuXG4gIHJ1bGVzLnB1c2goYmxvY2tRdW90ZVJ1bGUoc2NoZW1hLm5vZGVzLmJsb2NrcXVvdGUpKTtcbiAgcnVsZXMucHVzaChvcmRlcmVkTGlzdFJ1bGUoc2NoZW1hLm5vZGVzLm9yZGVyZWRfbGlzdCkpO1xuICBydWxlcy5wdXNoKGJ1bGxldExpc3RSdWxlKHNjaGVtYS5ub2Rlcy5idWxsZXRfbGlzdCkpO1xuICBydWxlcy5wdXNoKGNvZGVCbG9ja1J1bGUoc2NoZW1hLm5vZGVzLmNvZGVfYmxvY2spKTtcbiAgcnVsZXMucHVzaChoZWFkaW5nUnVsZShzY2hlbWEubm9kZXMuaGVhZGluZywgNikpO1xuXG4gIHJldHVybiBpbnB1dFJ1bGVzKHsgcnVsZXMgfSk7XG59O1xuXG5jb25zdCBnZXRLZXlib2FyZFNob3J0Y3V0cyA9IChzY2hlbWE6IFNjaGVtYSwgb3B0aW9uczogU2hvcnRjdXRPcHRpb25zKSA9PiB7XG4gIGNvbnN0IGhpc3RvcnlLZXlNYXA6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcblxuICBoaXN0b3J5S2V5TWFwWydNb2QteiddID0gdW5kbztcbiAgaWYgKGlzTWFjT3MpIHtcbiAgICBoaXN0b3J5S2V5TWFwWydTaGlmdC1Nb2QteiddID0gcmVkbztcbiAgfSBlbHNlIHtcbiAgICBoaXN0b3J5S2V5TWFwWydNb2QteSddID0gcmVkbztcbiAgfVxuXG4gIGNvbnN0IHBsdWdpbnMgPSBbXG4gICAga2V5bWFwKHtcbiAgICAgICdNb2QtYic6IHRvZ2dsZU1hcmsoc2NoZW1hLm1hcmtzLnN0cm9uZyksXG4gICAgICAnTW9kLWknOiB0b2dnbGVNYXJrKHNjaGVtYS5tYXJrcy5lbSksXG4gICAgICAnTW9kLWAnOiB0b2dnbGVNYXJrKHNjaGVtYS5tYXJrcy5jb2RlKSxcbiAgICB9KSxcbiAgICBrZXltYXAoe1xuICAgICAgRW50ZXI6IHNwbGl0TGlzdEl0ZW0oc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSksXG4gICAgICAnTW9kLVsnOiBsaWZ0TGlzdEl0ZW0oc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSksXG4gICAgICAnTW9kLV0nOiBzaW5rTGlzdEl0ZW0oc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSksXG4gICAgICBUYWI6IHNpbmtMaXN0SXRlbShzY2hlbWEubm9kZXMubGlzdF9pdGVtKVxuICAgIH0pLFxuICAgIGtleW1hcChiYXNlS2V5bWFwKVxuICBdO1xuXG4gIGlmIChvcHRpb25zLmhpc3RvcnkpIHtcbiAgICBwbHVnaW5zLnB1c2goa2V5bWFwKGhpc3RvcnlLZXlNYXApKTtcbiAgfVxuXG4gIHJldHVybiBwbHVnaW5zO1xufTtcblxuY29uc3QgZ2V0RGVmYXVsdFBsdWdpbnMgPSAoc2NoZW1hOiBTY2hlbWEsIG9wdGlvbnM6IE9wdGlvbnMpID0+IHtcbiAgY29uc3QgcGx1Z2luczogUGx1Z2luW10gPSBbXTtcblxuICBpZiAob3B0aW9ucy5rZXlib2FyZFNob3J0Y3V0cykge1xuICAgIHBsdWdpbnMucHVzaCguLi5nZXRLZXlib2FyZFNob3J0Y3V0cyhzY2hlbWEsIHsgaGlzdG9yeTogb3B0aW9ucy5oaXN0b3J5IH0pKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhpc3RvcnkpIHtcbiAgICBwbHVnaW5zLnB1c2goaGlzdG9yeSgpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlucHV0UnVsZXMpIHtcbiAgICBwbHVnaW5zLnB1c2goYnVpbGRJbnB1dFJ1bGVzKHNjaGVtYSkpO1xuICB9XG5cbiAgcmV0dXJuIHBsdWdpbnM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXREZWZhdWx0UGx1Z2lucztcbiJdfQ==