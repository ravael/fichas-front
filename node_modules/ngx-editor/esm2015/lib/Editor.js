import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { Subject } from 'rxjs';
import { editable as editablePlugin, placeholder as placeholderPlugin } from 'ngx-editor/plugins';
import { isNil } from 'ngx-editor/utils';
import EditorCommands from './EditorCommands';
import defautlSchema from './schema';
import { parseContent } from './parsers';
import getDefaultPlugins from './defaultPlugins';
const DEFAULT_OPTIONS = {
    content: null,
    enabled: true,
    history: true,
    keyboardShortcuts: true,
    inputRules: true,
    schema: defautlSchema,
    plugins: [],
    nodeViews: {}
};
class Editor {
    constructor(options = DEFAULT_OPTIONS) {
        this.onContentChange = new Subject();
        this.onFocus = new Subject();
        this.onBlur = new Subject();
        this.onUpdate = new Subject();
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
        this.createEditor();
    }
    get schema() {
        return this.options.schema || defautlSchema;
    }
    get commands() {
        return new EditorCommands(this.view);
    }
    setContent(content) {
        if (isNil(content)) {
            return;
        }
        const { state } = this.view;
        const { tr, doc } = state;
        const newDoc = parseContent(content, this.schema);
        tr.replaceWith(0, state.doc.content.size, newDoc);
        // don't emit if both content is same
        if (doc.eq(tr.doc)) {
            return;
        }
        if (!tr.docChanged) {
            return;
        }
        this.view.dispatch(tr);
    }
    handleTransactions(tr) {
        const state = this.view.state.apply(tr);
        this.view.updateState(state);
        this.onUpdate.next();
        if (!tr.docChanged && !tr.getMeta('FORCE_EMIT')) {
            return;
        }
        const json = state.doc.toJSON();
        this.onContentChange.next(json);
    }
    createEditor() {
        var _a, _b;
        const { options } = this;
        const { content = null, nodeViews, enabled } = options;
        const { history = true, keyboardShortcuts = true, inputRules = true } = options;
        const schema = this.schema;
        const editable = enabled !== null && enabled !== void 0 ? enabled : true;
        const placeholder = (_a = options.placeholder) !== null && _a !== void 0 ? _a : '';
        const doc = parseContent(content, schema);
        this.el = document.createDocumentFragment();
        const plugins = [
            editablePlugin(),
            placeholderPlugin(placeholder),
            ...((_b = options.plugins) !== null && _b !== void 0 ? _b : [])
        ];
        const defaultPlugins = getDefaultPlugins(schema, {
            history,
            keyboardShortcuts,
            inputRules
        });
        plugins.push(...defaultPlugins);
        this.view = new EditorView(this.el, {
            editable: () => editable,
            state: EditorState.create({
                doc,
                schema,
                plugins,
            }),
            nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this),
            handleDOMEvents: {
                focus: () => {
                    this.onFocus.next();
                    return false;
                },
                blur: () => {
                    this.onBlur.next();
                    return false;
                }
            },
            attributes: {
                class: 'NgxEditor__Content'
            },
        });
    }
    registerPlugin(plugin) {
        const { state } = this.view;
        const plugins = [...state.plugins, plugin];
        const newState = state.reconfigure({ plugins });
        this.view.updateState(newState);
    }
    enable() {
        const { dispatch, state: { tr } } = this.view;
        dispatch(tr.setMeta('UPDATE_EDITABLE', true));
    }
    disable() {
        const { dispatch, state: { tr } } = this.view;
        dispatch(tr.setMeta('UPDATE_EDITABLE', false));
    }
    setPlaceholder(placeholder) {
        const { dispatch, state: { tr } } = this.view;
        dispatch(tr.setMeta('UPDATE_PLACEHOLDER', placeholder));
    }
    destroy() {
        this.view.destroy();
    }
}
export default Editor;
//# sourceMappingURL=data:application/json;base64,